---
jupyter: python3
---

# üöÄ LLMOps for Production RAG

Welcome to the LLMOps for Production RAG workshop! In this workshop, we will cover:

1. Creating a baseline RAG pipeline
2. Bootstrapping an evaluation dataset
3. RAG Hyperparameter Optimization


```{python}
try:
    import google.colab
    IN_COLAB = True
except ImportError:
    IN_COLAB = False

if IN_COLAB:
    !git clone https://github.com/unionai-oss/llmops-production-rag.git
    %cd llmops-production-rag
    %pip install -r requirements.lock.txt
```


```{python}
%cd /content/llmops-production-rag
!union create login --auth device-flow --serverless
```

## üîë Create OpenAI API Key Secret on Union

First go to https://platform.openai.com/account/api-keys and create an OpenAI API key.

Then, run the following command to make the secret accessible on Union:

```bash
!union create secret openai_api_key
```

```bash
!union get secret
```

If you have issues with the secret, you can delete it by uncommenting the code cell below:

```bash
#!union delete secret openai_api_key
```


## üóÇÔ∏è Creating a Baseline RAG Pipeline

Create the vector store:

```bash
!union run --remote llmops_rag/vector_store.py create --limit 10
```

Then run the simple rag pipeline

```bash
!union run --remote llmops_rag/rag_basic.py rag_basic --questions '["How do I read and write a pandas dataframe to csv format?"]'
```

## ü•æ Bootstrapping an Evaluation Dataset

Then generate a question and answer dataset. This will use the raw knowledge base we created
in the previous step.

```bash
!union run --remote llmops_rag/create_qa_dataset.py create_qa_dataset --n_questions_per_doc 5 --n_answers_per_question 5
```

Filter the dataset with an LLM critic:

```bash
!union run --remote llmops_rag/create_llm_filtered_dataset.py create_llm_filtered_dataset
```


## üìä RAG Hyperparameter Optimization

Experiment with different chunksizes:

```bash
!union run --remote llmops_rag/optimize_rag.py optimize_rag --hpo_configs config/chunksize_experiment.yaml
```

Experiment with different splitters:

```bash
!union run --remote llmops_rag/optimize_rag.py optimize_rag --hpo_configs config/splitter_experiment.yaml
```

Experiment with different embedding models:

```bash
!union run --remote llmops_rag/optimize_rag.py optimize_rag --hpo_configs config/embedding_model_experiment.yaml
```

Experiment with reranking:

```bash
!union run --remote llmops_rag/optimize_rag.py optimize_rag --hpo_configs config/reranking_experiment.yaml
```

Experiment with document retrieval:

```bash
!union run --remote llmops_rag/optimize_rag.py optimize_rag --hpo_configs config/search_params_experiment.yaml
```
